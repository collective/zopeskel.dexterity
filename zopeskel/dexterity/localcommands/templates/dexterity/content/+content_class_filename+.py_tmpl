#if str($grokish) == 'True'
from five import grok
#end if

from z3c.form import group, field
from zope import schema
from zope.interface import invariant, Invalid
from zope.schema.interfaces import IContextSourceBinder
from zope.schema.vocabulary import SimpleVocabulary, SimpleTerm

#if str($folderish) == 'True'
from plone.dexterity.content import Container
#else
from plone.dexterity.content import Item
#end if

#
#if str($grokish) == 'True'
from plone.directives import dexterity, form
#end if
from plone.app.textfield import RichText
from plone.namedfile.field import NamedImage, NamedFile
from plone.namedfile.field import NamedBlobImage, NamedBlobFile
from plone.namedfile.interfaces import IImageScaleTraversable

#if str($relations) == 'True'
from z3c.relationfield.schema import RelationList, RelationChoice
from plone.formwidget.contenttree import ObjPathSourceBinder

#end if
#if str($grokish) == 'False'
from plone.supermodel import model
from Products.Five import BrowserView
#end if

from ${package_dotted_name} import MessageFactory as _


\# Interface class; used to define content-type schema.

#if str($grokish) == 'True'
class ${interface_name}(form.Schema, IImageScaleTraversable):
#else
class ${interface_name}(model.Schema, IImageScaleTraversable):
#end if
    """
    ${contenttype_description}
    """

    # If you want a schema-defined interface, delete the model.load
    # line below and delete the matching file in the models sub-directory.
    #
    # If you want a model-based interface, edit
    # models/${content_class_filename}.xml to define the content type.

#if str($grokish) == 'True'
    form.model("models/${content_class_filename}.xml")
#else
    model.load("models/${content_class_filename}.xml")
#end if


\# Custom content-type class; objects created for this content type will
\# be instances of this class. Use this class to add content-type specific
\# methods and properties. Put methods that are mainly useful for rendering
\# in separate view classes.

#if str($folderish) == 'True'
class ${contenttype_classname}(Container):
#else
class ${contenttype_classname}(Item):
#end
#
#if str($grokish) == 'True'
    grok.implements(${interface_name})
#end if

    # Add your class methods and properties here
    pass


#if str($grokish) == 'True'
\# View class
\# The view will automatically use a similarly named template in
\# ${content_class_filename}_templates.
\# Template filenames should be all lower case.
\# The view will render when you request a content object with this
\# interface with "/@@sampleview" appended.
\# You may make this the default view for content objects
\# of this type by uncommenting the grok.name line below or by
\# changing the view class name and template filename to View / view.pt.

class SampleView(grok.View):
    """ sample view class """

    grok.context(${interface_name})
    grok.require('zope2.View')

    \# grok.name('view')

    \# Add view methods here
#else
\# View class
\# The view is configured in configure.zcml. Edit there to change
\# its public name. Unless changed, the view will be available
\# TTW at content/@@sampleview

class SampleView(BrowserView):
    """ sample view class """

    \# Add view methods here
#end if
